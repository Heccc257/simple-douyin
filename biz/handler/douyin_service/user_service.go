// Code generated by hertz generator.

package douyin_service

import (
	"context"
	"fmt"
	"log"
	"sync"
	"time"

	"simple_douyin/biz/model/common"
	core "simple_douyin/biz/model/core"
	"simple_douyin/database"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// 总的UserID，从1开始（与数据库表项的ID要区分）
var (
	globalUserID int64 = 1
	userIDLock   sync.Mutex
)

func assignUserID() (userID int64) {
	userIDLock.Lock()
	globalUserID++
	userID = globalUserID
	userIDLock.Unlock()
	return
}

// Register .
// @router douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// fmt.Printf("%+v\n", req)
	resp := new(core.DouyinUserRegisterResponse)

	if Len := len(req.Username); Len > 32 || Len == 0 {
		// 用户名长度不对
		resp.StatusCode = -1
		resp.StatusMsg = "username too long or to short"
	} else if Len := len(req.Password); Len > 32 || Len == 0 {
		// 密码长度对
		resp.StatusCode = -1
		resp.StatusMsg = "password too long or to short"
	} else {
		if database.UserExist(req.Username) {
			// 用户名已存在
			resp.StatusCode, resp.StatusMsg = -1, "User name exist!"
		} else {
			user := &common.User{
				ID:   int64(assignUserID()),
				Name: req.Username,
			}
			err := database.UpdateUser(user, req.Password)
			if err != nil {
				// update err
				resp.StatusCode, resp.StatusMsg = -1, err.Error()
			} else {
				// Token返回为用户名+当前时间
				resp.StatusCode = 0
				resp.StatusMsg = "register success"
				resp.UserID = user.ID
				resp.Token = req.Username + " " + time.Now().GoString()
				log.Printf("user %s registered\n", req.Username)
			}
		}
	}

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(core.DouyinUserLoginResponse)

	if ue := database.FindUserEntryByName(req.Username); ue.Name == "unknown" {
		// 未找到
		resp.StatusCode, resp.StatusMsg = -1, "no such user"
	} else if ue.PassWord != req.Password {
		resp.StatusCode, resp.StatusMsg = -1, "incorrect password"
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "login success"
		resp.UserID = ue.UID
		resp.Token = ue.Name + " " + time.Now().GoString()
		log.Printf("user %s login\n", req.Username)
	}

	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	fmt.Printf("%+v\n", req)
	resp := new(core.DouyinUserResponse)

	c.JSON(consts.StatusOK, resp)
}
